// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogRebase extends ethereum.Event {
  get params(): LogRebase__Params {
    return new LogRebase__Params(this);
  }
}

export class LogRebase__Params {
  _event: LogRebase;

  constructor(event: LogRebase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get exchangeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cpi(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get requestedSupplyAdjustment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestampSec(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipRenounced extends ethereum.Event {
  get params(): OwnershipRenounced__Params {
    return new OwnershipRenounced__Params(this);
  }
}

export class OwnershipRenounced__Params {
  _event: OwnershipRenounced;

  constructor(event: OwnershipRenounced) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PolicyABI__globalAmpleforthEpochAndAMPLSupplyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PolicyABI extends ethereum.SmartContract {
  static bind(address: Address): PolicyABI {
    return new PolicyABI("PolicyABI", address);
  }

  cpiOracle(): Address {
    let result = super.call("cpiOracle", "cpiOracle():(address)", []);

    return result[0].toAddress();
  }

  try_cpiOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("cpiOracle", "cpiOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deviationThreshold(): BigInt {
    let result = super.call(
      "deviationThreshold",
      "deviationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_deviationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deviationThreshold",
      "deviationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalAmpleforthEpochAndAMPLSupply(): PolicyABI__globalAmpleforthEpochAndAMPLSupplyResult {
    let result = super.call(
      "globalAmpleforthEpochAndAMPLSupply",
      "globalAmpleforthEpochAndAMPLSupply():(uint256,uint256)",
      []
    );

    return new PolicyABI__globalAmpleforthEpochAndAMPLSupplyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_globalAmpleforthEpochAndAMPLSupply(): ethereum.CallResult<
    PolicyABI__globalAmpleforthEpochAndAMPLSupplyResult
  > {
    let result = super.tryCall(
      "globalAmpleforthEpochAndAMPLSupply",
      "globalAmpleforthEpochAndAMPLSupply():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PolicyABI__globalAmpleforthEpochAndAMPLSupplyResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  inRebaseWindow(): boolean {
    let result = super.call("inRebaseWindow", "inRebaseWindow():(bool)", []);

    return result[0].toBoolean();
  }

  try_inRebaseWindow(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inRebaseWindow", "inRebaseWindow():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRebaseTimestampSec(): BigInt {
    let result = super.call(
      "lastRebaseTimestampSec",
      "lastRebaseTimestampSec():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRebaseTimestampSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRebaseTimestampSec",
      "lastRebaseTimestampSec():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketOracle(): Address {
    let result = super.call("marketOracle", "marketOracle():(address)", []);

    return result[0].toAddress();
  }

  try_marketOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("marketOracle", "marketOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minRebaseTimeIntervalSec(): BigInt {
    let result = super.call(
      "minRebaseTimeIntervalSec",
      "minRebaseTimeIntervalSec():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minRebaseTimeIntervalSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRebaseTimeIntervalSec",
      "minRebaseTimeIntervalSec():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orchestrator(): Address {
    let result = super.call("orchestrator", "orchestrator():(address)", []);

    return result[0].toAddress();
  }

  try_orchestrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("orchestrator", "orchestrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebaseLag(): BigInt {
    let result = super.call("rebaseLag", "rebaseLag():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebaseLag(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebaseLag", "rebaseLag():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebaseWindowLengthSec(): BigInt {
    let result = super.call(
      "rebaseWindowLengthSec",
      "rebaseWindowLengthSec():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseWindowLengthSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseWindowLengthSec",
      "rebaseWindowLengthSec():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebaseWindowOffsetSec(): BigInt {
    let result = super.call(
      "rebaseWindowOffsetSec",
      "rebaseWindowOffsetSec():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseWindowOffsetSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseWindowOffsetSec",
      "rebaseWindowOffsetSec():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uFrags(): Address {
    let result = super.call("uFrags", "uFrags():(address)", []);

    return result[0].toAddress();
  }

  try_uFrags(): ethereum.CallResult<Address> {
    let result = super.tryCall("uFrags", "uFrags():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uFrags_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get baseCpi_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RebaseCall extends ethereum.Call {
  get inputs(): RebaseCall__Inputs {
    return new RebaseCall__Inputs(this);
  }

  get outputs(): RebaseCall__Outputs {
    return new RebaseCall__Outputs(this);
  }
}

export class RebaseCall__Inputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }
}

export class RebaseCall__Outputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCpiOracleCall extends ethereum.Call {
  get inputs(): SetCpiOracleCall__Inputs {
    return new SetCpiOracleCall__Inputs(this);
  }

  get outputs(): SetCpiOracleCall__Outputs {
    return new SetCpiOracleCall__Outputs(this);
  }
}

export class SetCpiOracleCall__Inputs {
  _call: SetCpiOracleCall;

  constructor(call: SetCpiOracleCall) {
    this._call = call;
  }

  get cpiOracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCpiOracleCall__Outputs {
  _call: SetCpiOracleCall;

  constructor(call: SetCpiOracleCall) {
    this._call = call;
  }
}

export class SetDeviationThresholdCall extends ethereum.Call {
  get inputs(): SetDeviationThresholdCall__Inputs {
    return new SetDeviationThresholdCall__Inputs(this);
  }

  get outputs(): SetDeviationThresholdCall__Outputs {
    return new SetDeviationThresholdCall__Outputs(this);
  }
}

export class SetDeviationThresholdCall__Inputs {
  _call: SetDeviationThresholdCall;

  constructor(call: SetDeviationThresholdCall) {
    this._call = call;
  }

  get deviationThreshold_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDeviationThresholdCall__Outputs {
  _call: SetDeviationThresholdCall;

  constructor(call: SetDeviationThresholdCall) {
    this._call = call;
  }
}

export class SetMarketOracleCall extends ethereum.Call {
  get inputs(): SetMarketOracleCall__Inputs {
    return new SetMarketOracleCall__Inputs(this);
  }

  get outputs(): SetMarketOracleCall__Outputs {
    return new SetMarketOracleCall__Outputs(this);
  }
}

export class SetMarketOracleCall__Inputs {
  _call: SetMarketOracleCall;

  constructor(call: SetMarketOracleCall) {
    this._call = call;
  }

  get marketOracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketOracleCall__Outputs {
  _call: SetMarketOracleCall;

  constructor(call: SetMarketOracleCall) {
    this._call = call;
  }
}

export class SetOrchestratorCall extends ethereum.Call {
  get inputs(): SetOrchestratorCall__Inputs {
    return new SetOrchestratorCall__Inputs(this);
  }

  get outputs(): SetOrchestratorCall__Outputs {
    return new SetOrchestratorCall__Outputs(this);
  }
}

export class SetOrchestratorCall__Inputs {
  _call: SetOrchestratorCall;

  constructor(call: SetOrchestratorCall) {
    this._call = call;
  }

  get orchestrator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOrchestratorCall__Outputs {
  _call: SetOrchestratorCall;

  constructor(call: SetOrchestratorCall) {
    this._call = call;
  }
}

export class SetRebaseLagCall extends ethereum.Call {
  get inputs(): SetRebaseLagCall__Inputs {
    return new SetRebaseLagCall__Inputs(this);
  }

  get outputs(): SetRebaseLagCall__Outputs {
    return new SetRebaseLagCall__Outputs(this);
  }
}

export class SetRebaseLagCall__Inputs {
  _call: SetRebaseLagCall;

  constructor(call: SetRebaseLagCall) {
    this._call = call;
  }

  get rebaseLag_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebaseLagCall__Outputs {
  _call: SetRebaseLagCall;

  constructor(call: SetRebaseLagCall) {
    this._call = call;
  }
}

export class SetRebaseTimingParametersCall extends ethereum.Call {
  get inputs(): SetRebaseTimingParametersCall__Inputs {
    return new SetRebaseTimingParametersCall__Inputs(this);
  }

  get outputs(): SetRebaseTimingParametersCall__Outputs {
    return new SetRebaseTimingParametersCall__Outputs(this);
  }
}

export class SetRebaseTimingParametersCall__Inputs {
  _call: SetRebaseTimingParametersCall;

  constructor(call: SetRebaseTimingParametersCall) {
    this._call = call;
  }

  get minRebaseTimeIntervalSec_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rebaseWindowOffsetSec_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rebaseWindowLengthSec_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRebaseTimingParametersCall__Outputs {
  _call: SetRebaseTimingParametersCall;

  constructor(call: SetRebaseTimingParametersCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
